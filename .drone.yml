clone:
  git:
    image: plugins/git:next
    pull: true

pipeline:

  build-thundemint:
    image: nixos/nix
    pull: true
    privileged: true
    network_mode: host
    commands:
    - apk add --no-cache git bash openssh-client
    # Setup SSH connection to git repos and cache server
    - source ./nix/setup_ssh_ci.sh
    # Setup signing key
    - echo -n "$${NIX_CACHE_SIGNING_KEY}" > "$${HOME}/nix-cache-key.sec"
    - chmod 400 "$${HOME}/nix-cache-key.sec"
    # Build backend
    - cd nix
    - ./build-ci.sh
    secrets: [ nix_cache_key, nix_cache_signing_key, drone_github_pull_key ]

  build-thundemint-ghcjs:
    group: build
    image: nixos/nix
    pull: true
    privileged: true
    network_mode: host
    commands:
    - apk add --no-cache git bash openssh-client
    # Setup SSH connection to git repos and cache server
    - source ./nix/setup_ssh_ci.sh
    # Setup signing key
    - echo -n "$${NIX_CACHE_SIGNING_KEY}" > "$${HOME}/nix-cache-key.sec"
    - chmod 400 "$${HOME}/nix-cache-key.sec"
    # Build backend
    - cd nix
    - ./build-ci.sh GHCJS
    secrets: [ nix_cache_key, nix_cache_signing_key, drone_github_pull_key ]

  dockerize-thundemint:
    group: publish
    image: nixos/nix
    pull: true
    privileged: true
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    commands:
    - apk add --no-cache git bash openssh-client docker
    # Setup SSH connection to git repos and cache server
    - source ./nix/setup_ssh_ci.sh
    # Setup signing key
    - echo -n "$${NIX_CACHE_SIGNING_KEY}" > "$${HOME}/nix-cache-key.sec"
    - chmod 400 "$${HOME}/nix-cache-key.sec"
    # Build containers
    - cd nix
    - ./build-docker-ci.sh
    secrets: [ nix_cache_key, nix_cache_signing_key, drone_github_pull_key, docker_username, docker_password ]
    when:
      event: [ push, tag, pull_request ]

  telegram:
    image: appleboy/drone-telegram
    token: $PLUGIN_TOKEN
    to: $PLUGIN_TO
    secrets: [ plugin_token, plugin_to ]
    message: >
      {{build.status}}

      {{build.link}}

      ${DRONE_BUILD_EVENT} ${DRONE_PULL_REQUEST= } to branch *{{commit.branch}}* by {{commit.author}}

      {{commit.message}}

      build time is {{buildtime build.started}}
    when:
      status: [ success, failure ]

branches: [ master ]
