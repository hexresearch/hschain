{ roots = [ "^Main.main$"
          , "^Paths_.*"
          , "HSChain.Crypto.*Size$"
          , "HSChain.Crypto.make.*Box"
          , "HSChain.Crypto.open.*Box"
          , "HSChain.Crypto.signHashed"
          , "HSChain.Crypto.verifySignatureHashed"
          , "HSChain.Crypto.Classes.Hash.genericHashStep.{0,2}"
          , "HSChain.Crypto.Classes.Hash.hashed"
          , "HSChain.Crypto.PBKDF2Simple.sha512PBKDF2"

          , "HSChain.Types.Merkle.Block.merklize"
          , "HSChain.Types.Merkle.Block.concatTree"
          , "HSChain.Types.Merkle.Block.checkMerkleTree"
          , "HSChain.Types.Merkle.Tree.createMerkleTree"
          , "HSChain.Types.Merkle.Tree.merkleBlockTreeHash"
          , "HSChain.Types.Merkle.Tree.isBalanced"
          , "HSChain.Types.Merkle.Tree.checkMerkleProof"
          , "HSChain.Types.Merkle.Tree.createMerkleProof"
          , "HSChain.Types.Merkle.Types.mapMerkleNode"
          , "HSChain.Types.Merkle.Types.merkleHashed"
          , "HSChain.Types.Merkle.Types.toHashedNode"


          , "HSChain.Types.BFTTime.commitTime"
          , "HSChain.Types.Blockchain.blockHash"
          , "HSChain.Types.Blockchain.getCurrentTime"
          , "HSChain.Types.Blockchain.timeToUTC"
          , "HSChain.Types.Blockchain.toHeader"
          , "HSChain.Types.Blockchain.toHeader"
          , "HSChain.Types.Blockchain.signedValue"
          , "HSChain.Types.Blockchain.signedKeyInfo"
          , "HSChain.Types.Blockchain.signValue"
          , "HSChain.Types.Blockchain.verifySignature"
          , "HSChain.Types.Blockchain.unverifySignature"
          , "HSChain.Types.Validators.emptyValidatorSet"
          , "HSChain.Types.Validators.makeValidatorSet"
          , "HSChain.Types.Validators.totalVotingPower"
          , "HSChain.Types.Validators.validatorSetSize"
          , "HSChain.Types.Validators.validatorByIndex"
          , "HSChain.Types.Validators.asValidatorList"
          , "HSChain.Types.Validators.indexByValidator"
          , "HSChain.Types.Validators.getValidatorIntSet"
          , "HSChain.Types.Validators.insertValidatorIdx"
          , "HSChain.Types.Validators.emptyValidatorISet"
          , "HSChain.Types.Validators.emptyValidatorISetFromSize"
          , "HSChain.Types.Validators.changeValidators"
          , "HSChain.Types.Validators.validatorsDifference"
          , "HSChain.Types.Validators.indexByIntervalPoint"

          , "HSChain.Network.Internal.*"
          , "HSChain.Network.IpAddresses.filterOutOwnAddresses"
          , "HSChain.Network.IpAddresses.getLocalAddresses"
          , "HSChain.Network.IpAddresses.isLocalAddress"
          , "HSChain.Network.IpAddresses.normalizeNetAddr"
          , "HSChain.Network.IpAddresses.getNetAddrPort"
          , "HSChain.Network.Mock.newMockNet"
          , "HSChain.Network.Mock.createMockNode"
          , "HSChain.Network.TCP.newNetworkTcp"
          , "HSChain.Network.UDP.newNetworkUdp"

          , "HSChain.Control.Channels.*"
          , "HSChain.Control.Class.forkFinally"
          , "HSChain.Control.Class.forkLinked"
          , "HSChain.Control.Class.forkLinkedIO"
          , "HSChain.Control.Class.cforkLinked"
          , "HSChain.Control.Class.cforkLinkedIO"
          , "HSChain.Control.Class.runConcurrently"
          , "HSChain.Control.Delay.*"
          , "HSChain.Control.Mutex.newMutex"
          , "HSChain.Control.Mutex.withMutex"
          , "HSChain.Control.Shepherd.withShepherd"
          , "HSChain.Control.Shepherd.newSheep"
          , "HSChain.Control.Shepherd.newSheepFinally"
          , "HSChain.Control.Util.throwNothing"
          , "HSChain.Control.Util.throwNothingM"
          , "HSChain.Control.Util.throwLeft"
          , "HSChain.Control.Util.throwLeftM"

          , "HSChain.Logger.Class.setNamespace"
          , "HSChain.Logger.Class.descendNamespace"
          , "HSChain.Logger.runLoggerT"
          , "HSChain.Logger.withLogEnv"
          , "HSChain.Logger.newLogEnv"
          , "HSChain.Logger.runStdoutLogT"
          , "HSChain.Logger.logOnException"
          , "HSChain.Logger.makeScribe"
          , "HSChain.Logger.makeJsonHandleScribe"
          , "HSChain.Logger.makeJsonFileScribe"


          , "HSChain.Blockchain.Internal.Algorithm.newHeight"
          , "HSChain.Blockchain.Internal.Algorithm.tendermintTransition"
          , "HSChain.Blockchain.Internal.Engine.newAppChans"
          , "HSChain.Blockchain.Internal.Engine.initializeBlockchain"
          , "HSChain.Blockchain.Internal.Engine.runApplication"
          , "HSChain.Blockchain.Internal.Engine.Types.unverifyMessageRx"
          , "HSChain.Blockchain.Internal.Engine.Types.randomProposerSHA512"
          , "HSChain.Blockchain.Internal.Types.unverifyMessageRx"
          , "HSChain.Blockchain.Internal.Types.newVoteSet"
          , "HSChain.Blockchain.Internal.Types.newHeightVoteSet"
          , "HSChain.Control.iterateM"
          , "HSChain.Control.withMVarM"
          , "HSChain.Control.modifyMVarM"
          , "HSChain.Control.modifyMVarM_"
          , "HSChain.Crypto.Containers.toPlainMap"
          , "HSChain.Data.CIntMap.*"
          , "HSChain.Monitoring.createMonitoring"
          , "HSChain.Monitoring.standardMonitoring"
          , "HSChain.P2P.startPeerDispatcher"
          , "HSChain.P2P.PeerState.Timer.*"
          , "HSChain.Store.*"

          , "HSChain.PoW.Store.dbtRO"
          , "HSChain.PoW.Store.initDatabase"
          , "HSChain.PoW.Store.runDBT"
          , "HSChain.PoW.Store.withDatabase"
          , "HSChain.PoW.Store.Internal.BlockDB.*"
          , "HSChain.PoW.Store.Internal.Query.*"
          ], type-class-roots = True }
