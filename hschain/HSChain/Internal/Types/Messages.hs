{-# LANGUAGE DataKinds                  #-}
{-# LANGUAGE DeriveAnyClass             #-}
{-# LANGUAGE DeriveGeneric              #-}
{-# LANGUAGE DerivingStrategies         #-}
{-# LANGUAGE FlexibleContexts           #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase                 #-}
{-# LANGUAGE StandaloneDeriving         #-}
{-# LANGUAGE UndecidableInstances       #-}
-- |
module HSChain.Internal.Types.Messages where

import Codec.Serialise        (Serialise)
import GHC.Generics           (Generic)
import qualified Data.Aeson          as JSON

import HSChain.Crypto
import HSChain.Types.Blockchain
import HSChain.Types.Validators


----------------------------------------------------------------
-- Internal messages
----------------------------------------------------------------

-- | Messages generated by consensus state machine
data EngineMessage a
  = EngTimeout       !Timeout
    -- ^ Signals that given block from given round should be accepted
  | EngCastPropose   !Round !(BlockID a) !(Maybe Round)
  | EngCastPreVote   !Round !(Maybe (BlockID a))
  | EngCastPreCommit !Round !(Maybe (BlockID a))
  | EngMisdeed       !(ByzantineEvidence a)
  | EngAnnPreVote    !(Signed 'Verified (Alg a) (Vote 'PreVote   a))
  | EngAnnPreCommit  !(Signed 'Verified (Alg a) (Vote 'PreCommit a))
  | EngAnnProposal  !Round
  | EngAnnStep       !FullStep
  | EngAnnLock       !(Maybe Round)
  deriving (Show,Generic)

-- | Message received by main application
data MessageRx ty a
  = RxPreVote   !(Signed ty (Alg a) (Vote 'PreVote   a))
  | RxPreCommit !(Signed ty (Alg a) (Vote 'PreCommit a))
  | RxProposal  !(Signed ty (Alg a) (Proposal a))
  | RxTimeout   !Timeout
  | RxBlock     !(Block a)
  deriving (Generic)
instance (CryptoHashable a, Serialise     a, Crypto (Alg a)) => Serialise     (MessageRx 'Unverified a)
instance (CryptoHashable a, JSON.FromJSON a, Crypto (Alg a)) => JSON.FromJSON (MessageRx 'Unverified a)
instance (JSON.ToJSON a, Crypto (Alg a)) => JSON.ToJSON (MessageRx ty a)
deriving stock instance (CryptoHash (Alg a), Show a) => Show (MessageRx ty a)

unverifyMessageRx :: MessageRx 'Verified a -> MessageRx 'Unverified a
unverifyMessageRx = \case
  RxPreVote   s -> RxPreVote   (unverifySignature s)
  RxPreCommit s -> RxPreCommit (unverifySignature s)
  RxProposal  s -> RxProposal  (unverifySignature s)
  RxTimeout   t -> RxTimeout   t
  RxBlock     b -> RxBlock     b

data MessageTx a
  = TxAnn       !(Announcement (Alg a))
  | TxPreVote   !(Signed 'Unverified (Alg a) (Vote 'PreVote   a))
  | TxPreCommit !(Signed 'Unverified (Alg a) (Vote 'PreCommit a))
  | TxProposal  !(Signed 'Unverified (Alg a) (Proposal a))
  deriving (Show)

-- | Messages which should be delivered to peers immediately. Those
--   are control messages in gossip protocol. Actual proposals, votes
--   and blocks are delivered pure via gossip.
data Announcement alg
  = AnnStep         !FullStep
  | AnnHasProposal  !Height !Round
  | AnnHasBlock     !Height !Round
  | AnnHasPreVote   !Height !Round !(ValidatorIdx alg)
  | AnnHasPreCommit !Height !Round !(ValidatorIdx alg)
  | AnnLock         !(Maybe Round)
  deriving (Show,Generic)
instance Serialise (Announcement alg)
